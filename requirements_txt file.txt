A. Using the python PIP Command create a "requirement.txt" from the terminal command-prompt of your system:

1. Open your system's terminal or command prompt.

2. Navigate to Your Project Directory:

   Use the cd command to navigate to the directory where your Python project is located. For example, 
   if your project is in a folder called "myproject" on your desktop, you can navigate to it like this:
   cd ~/Desktop/myproject

3. Activate Your Virtual Environment (Optional):
   
   If you are using a virtual environment for your project (which is recommended for managing dependencies), activate it. 
   If you're not using a virtual environment, you can skip this step.
   .\myenv\Scripts\Activate.ps1

4. Use pip freeze to Generate requirements.txt

   Run the following command to generate a requirements.txt file:
   pip freeze > requirements.txt

5. Deactivate Your Virtual Environment (Optional):

   If you activated a virtual environment in step 3, deactivate it using the following command:
   deactivate

6. Now you have successfully created a requirements.txt file that lists the packages and their versions installed in your 
   Python environment. You can use this file to recreate the same environment on another system by running:

   pip install -r requirements.txt

7. To install the Flask module with a version less than 2.0 on your system using the pip command, you can specify the desired version 
   using the == operator. 
   Here's the command to do that:

   B. Using the Python PIP Command install the Flask Module<2.0

   pip install Flask<2.0

   This command will install the latest version of Flask that is less than 2.0. It will not install Flask 2.0 or higher. After running 
   this command, Flask should be installed in your Python environment with the specified version.

    C. Music Player using oops concept in typescript 

8. Set up your project structure:

   /music-player
  /src
    index.html
    main.ts
    audio.ts
    playlist.ts
    tsconfig.json
    package.json


  (i) Install necessary dependencies:
 
   npm init -y
   npm install --save bootstrap


  (ii) Write TypeScript code:

   // audio.ts
class Audio {
  constructor(public name: string, public url: string, public rating: number = 0) {}

  setRating(rating: number): void {
    this.rating = rating;
  }
}

// playlist.ts
class Playlist {
  audios: Audio[] = [];
  averageRating: number = 0;

  constructor(public name: string) {}

  addAudio(audio: Audio): void {
    this.audios.push(audio);
    this.calculateAverageRating();
  }

  calculateAverageRating(): void {
    if (this.audios.length > 0) {
      const totalRating = this.audios.reduce((sum, audio) => sum + audio.rating, 0);
      this.averageRating = totalRating / this.audios.length;
    }
  }
}

// main.ts
class MusicPlayer {
  playlists: Playlist[] = [];

  createPlaylist(name: string): Playlist {
    const playlist = new Playlist(name);
    this.playlists.push(playlist);
    return playlist;
  }

  searchPlaylistByName(name: string): Playlist | undefined {
    return this.playlists.find((playlist) => playlist.name.toLowerCase() === name.toLowerCase());
  }

  searchAudioByName(name: string): Audio | undefined {
    for (const playlist of this.playlists) {
      const audio = playlist.audios.find((audio) => audio.name.toLowerCase() === name.toLowerCase());
      if (audio) {
        return audio;
      }
    }
    return undefined;
  }
}

// index.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Music Player</title>
  <link rel="stylesheet" href="node_modules/bootstrap/dist/css/bootstrap.min.css">
  <script defer src="src/main.js"></script>
</head>
<body>
  <!-- Your HTML content will be generated by TypeScript -->
</body>
</html>

  
  (iii) Compile TypeScript:
        Add the following to your tsconfig.json:
       {
  "compilerOptions": {
    "target": "es5",
    "module": "commonjs",
    "outDir": "./dist",
    "rootDir": "./src"
  }
}



  (iv) Create a basic UI using TypeScript and Bootstrap in main.ts:

// main.ts
document.body.innerHTML = `
  <div class="container mt-5">
    <h1 class="mb-4">Music Player</h1>
    <div class="mb-4">
      <button onclick="createPlaylist()">Create Playlist</button>
      <input id="playlistName" type="text" placeholder="Playlist Name">
    </div>
    <div class="mb-4">
      <button onclick="addAudio()">Add Audio</button>
      <input id="audioName" type="text" placeholder="Audio Name">
      <input id="audioURL" type="text" placeholder="Audio URL">
    </div>
    <div class="mb-4">
      <button onclick="searchPlaylist()">Search Playlist</button>
      <input id="searchPlaylistName" type="text" placeholder="Playlist Name">
    </div>
    <div class="mb-4">
      <button onclick="searchAudio()">Search Audio</button>
      <input id="searchAudioName" type="text" placeholder="Audio Name">
    </div>
  </div>
`;

const musicPlayer = new MusicPlayer();

function createPlaylist() {
  const playlistNameInput = document.getElementById('playlistName') as HTMLInputElement;
  const playlistName = playlistNameInput.value.trim();

  if (playlistName !== '') {
    musicPlayer.createPlaylist(playlistName);
    playlistNameInput.value = '';
  }
}

function addAudio() {
  const audioNameInput = document.getElementById('audioName') as HTMLInputElement;
  const audioURLInput = document.getElementById('audioURL') as HTMLInputElement;

  const audioName = audioNameInput.value.trim();
  const audioURL = audioURLInput.value.trim();

  if (audioName !== '' && audioURL !== '') {
    const playlist = musicPlayer.playlists[0]; // For simplicity, adding to the first playlist
    const audio = new Audio(audioName, audioURL);
    playlist.addAudio(audio);
    audioNameInput.value = '';
    audioURLInput.value = '';
  }
}

function searchPlaylist() {
  const searchPlaylistNameInput = document.getElementById('searchPlaylistName') as HTMLInputElement;
  const searchPlaylistName = searchPlaylistNameInput.value.trim();

  if (searchPlaylistName !== '') {
    const playlist = musicPlayer.searchPlaylistByName(searchPlaylistName);

    if (playlist) {
      alert(`Playlist found: ${playlist.name}`);
    } else {
      alert('Playlist not found.');
    }

    searchPlaylistNameInput.value = '';
  }
}

function searchAudio() {
  const searchAudioNameInput = document.getElementById('searchAudioName') as HTMLInputElement;
  const searchAudioName = searchAudioNameInput.value.trim();

  if (searchAudioName !== '') {
    const audio = musicPlayer.searchAudioByName(searchAudioName);

    if (audio) {
      alert(`Audio found: ${audio.name}`);
    } else {
      alert('Audio not found.');
    }

    searchAudioNameInput.value = '';
  }
}




